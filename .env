# When relayer is inside docker

# DATABASE_URL=postgres://relayer:relayer@localhost:5433/relayer
# REDIS_HOSTNAME=redis://default:foobared@redis-server/0
# POSTGRESQL_URL=postgresql://postgres:my_password@postgresql-master:5432/my_database
# QUESTDB_URL=postgresql://quest:my_password@questdb:8812/qdb
# QUESTDB_INFLUX_URL=questdb:9009
# BROKER=kafka:29092

# # When relayer is inside host machine
REDIS_HOSTNAME=redis://default:foobared@localhost/0
POSTGRESQL_URL=postgresql://postgres:my_password@localhost:5432/my_database
QUESTDB_URL=postgresql://quest:my_password@localhost:8812/qdb
QUESTDB_INFLUX_URL=127.0.0.1:9009
BROKER=localhost:9092
DATABASE_URL=postgres://relayer:relayer@localhost:5435/relayer
ZKOS_SERVER_URL=https://nykschain.twilight.rest/zkos

# When relayer is outside the server
# REDIS_HOSTNAME=redis://default:foobared@rpc.twilight.rest/0
# POSTGRESQL_URL=postgresql://postgres:my_password@rpc.twilight.rest:5432/my_database
# QUESTDB_URL=postgresql://quest:my_password@rpc.twilight.rest:8812/qdb
# QUESTDB_INFLUX_URL=rpc.twilight.rest:9009
# BROKER=rpc.twilight.rest:9092
# DATABASE_URL=postgres://relayer:relayer@rpc.twilight.rest:5433/relayer


# bitmex socket connection url

BITMEX_BTC_SOCKET_ORDERBOOK_URL=wss://ws.bitmex.com/realtime?subscribe=orderBookL2_25:XBTUSD
BITMEX_BTC_SOCKET_INSTRUMENT_URL=wss://ws.bitmex.com/realtime?subscribe=instrument

# Binance BTC socket URL

# https://binance-docs.github.io/apidocs/spot/en/#individual-symbol-mini-ticker-stream

# A single connection to stream.binance.com is only valid for 24 hours; expect to be disconnected at the 24 hour mark

# The websocket server will send a ping frame every 3 minutes. If the websocket server does not receive a pong frame back from the connection within a 10 minute period, the connection will be disconnected. Unsolicited pong frames are allowed.

# BINANCE_BTC_SOCKET=wss://stream.binance.com:9443/ws/btcusdt@miniTicker
BINANCE_BTC_SOCKET= wss://stream.binance.com/ws/btcusdt@aggTrade

# Binance BTC API URL

BINANCE_BTC_API=https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT

# coincap API 2.0 BTC Price Socket URL

# https://docs.coincap.io/#37dcec0b-1f7b-4d98-b152-0217a6798058

COINCAP_BTC_SOCKET=wss://ws.coincap.io/prices?assets=bitcoin


RelayerVersion=1.0.0
SnapshotVersion=1.0.1
EVENTLOG_VERSION=1.0.1

# RPC loadbalance mode
# RPC_QUEUE_MODE=KAFKA
# RPC_QUEUE_MODE=AERON
RPC_QUEUE_MODE=DIRECT

#RPC Thread Count
RPC_SERVER_THREAD=15
RPC_SERVER_SOCKETADDR=0.0.0.0:3032
RPC_SERVER_SOCKETADDR_TEST_DIRECT=0.0.0.0:3033

KAFKA_STATUS=Enabled

# kafka topics
# Topics should be already created before running the application
# kafkalib::kafka_topic::kafka_new_topic("BinanceMiniTickerPayload");
# kafkalib::kafka_topic::kafka_new_topic("CLIENT-REQUEST");
# kafkalib::kafka_topic::kafka_new_topic("TraderOrderEventLog1");
# kafkalib::kafka_topic::kafka_new_topic("LendOrderEventLog1");
# kafkalib::kafka_topic::kafka_new_topic("LendPoolEventLog1");

PRICE_LOG=BinanceMiniTickerPayload
RPC_CLIENT_REQUEST=CLIENT-REQUEST
RPC_CLIENT_FAILED_REQUEST=CLIENT-FAILED-REQUEST

TRADERORDER_EVENT_LOG=CoreEventLogTopic
LENDORDER_EVENT_LOG=CoreEventLogTopic
LENDPOOL_EVENT_LOG=CoreEventLogTopic
CORE_EVENT_LOG=CoreEventLogTopic
SNAPSHOT_LOG=SnapShotLogTopic

# relayer's snapshot path
# RELAYER_SNAPSHOT_FILE_LOCATION=/usr/bin/relayer_snapshot/snapshot-version
# # snapshot file location path for utxo storage
# SNAPSHOT_FILE_LOCATION=/usr/bin/relayer_snapshot/utxo_storage/

# # for windows
RELAYER_SNAPSHOT_FILE_LOCATION=./relayer_snapshot/snapshot-version
SNAPSHOT_FILE_LOCATION=./relayer_snapshot/utxo_storage/

# start taking snapshot after given blocks procced
# snapshot blockheight checkpoint
SNAPSHOT_BLOCKHEIGHT_THRESHOLD=1000

# start taking snapshot after given miliseconds
SNAPSHOT_DURATION_THRESHOLD=0


WALLET_PROGRAM_PATH=./relayerprogram.json
# RELAYER_RPC_SERVER_URL=http://ec2-3-0-28-9.ap-southeast-1.compute.amazonaws.com/clientapi

# for enabling zkos chain transaction
ENABLE_ZKOS_CHAIN_TRANSACTION=true

# for enabling zkos command transaction file save fn
ENABLE_ZKOS_CHAIN_TRANSACTION_FILES_WRITE_FOR_TX_RESPONSE=true

# Relayer Wallet Key Management
RELAYER_WALLET_IV=your_password_he
RELAYER_WALLET_SEED="uhv30yu9rNNRH7RIEIBcN+PgZ46y7C8ebc+IvJWgzQx3vjF9JP2VJZpJzLyUfKJ0W2nue6x00pTMA69X0fERlw=="
RELAYER_WALLET_PATH=/usr/bin/relayer_wallet
RELAYER_WALLET_PASSWORD=your_password_he
RUST_BACKTRACE=1


REALYER_INIT_STATE=0200000002000000010000002a000000000000003138323237323664346265336336623333623166333434633734333263626530343230333861663162388a00000000000000306365633966613035386564663135393335393665666235636231323263353938333166663962333161656431373362653162646362663733346536626332303664353666363737656237323332356432386464386264393939616166663165346561663331356432646566633263333730633833396437303636323063316231393562393034386331010000000000000000e1f505000000000000000000000000f8a6437a088d9e0a5ed9e502ff7cec432174487856de850fcbb3b82af288b70c01010000000000000002000000010000000000000040420f00000000000000000000000000063cd0f55597aae561758c4383feddb4c05578109b36c7e921b6298e9097b70c00000000