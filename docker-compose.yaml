version: "3"

services:
  redis-server:
    hostname: redis
    container_name: redis
    build:
      context: ./redis
      dockerfile: Dockerfile
    restart: always
    # image: "redis:latest"
    ports:
      - "6379:6379"
    volumes:
      # - ./redis/data:/data
      - redis_master_data:/data
      # - ./redis/redis.conf:/config/redis.conf
      - ./redis/config/:/etc/redis/
    # command: redis-server --requirepass foobared
    # ipc: host

  postgresql-master:
    hostname: postgresql
    container_name: postgresql
    image: docker.io/bitnami/postgresql:11
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - "postgresql_master_data:/bitnami/postgresql"
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_DATABASE=my_database
      - ALLOW_EMPTY_PASSWORD=yes

  # PostgRestApi:
  #   hostname: PostgRestAPI
  #   container_name: PostgRestAPI
  #   image: postgrest/postgrest
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     PGRST_DB_URI: postgresql://postgres:my_password@postgresql:5432/my_database
  #     PGRST_DB_SCHEMA: api
  #     PGRST_DB_ANON_ROLE: postgres #In production this role should not be the same as the one used for the connection
  #     PGRST_OPENAPI_SERVER_PROXY_URI: http://localhost/api
  #   depends_on:
  #     - postgresql-master

  questdb:
    image: questdb/questdb
    restart: always
    stdin_open: true
    hostname: questDB
    container_name: questDB
    ports:
      - "9000:9000"
      - "9009:9009"
      - "8812:8812"
    volumes:
      - "questdb_master_data:/root/.questdb/"
    environment:
      - QDB_PG_USER=quest
      - QDB_PG_PASSWORD=my_password

  # relayer:
  #   build:
  #     context: ./
  #     dockerfile: Dockerfile
  #   hostname: relayer
  #   stdin_open: true
  #   ports:
  #     - "3030:3030"
  #   depends_on:
  #     - postgresql-master
  #     - redis-server
  #     - questdb
  #   container_name: relayer
  #   # network_mode: host
  #   ipc: host

  relayer-dev:
    build:
      context: ./
      dockerfile: Dockerfile.dev
    hostname: relayer-dev
    stdin_open: true
    ports:
      - "3031:3030"
    depends_on:
      - postgresql-master
      - redis-server
      - questdb
    container_name: relayer-dev
    # network_mode: host
    ipc: host

  nginx:
    restart: always
    container_name: nginx
    hostname: nginx
    build:
      dockerfile: Dockerfile
      context: ./nginx
    ports:
      - "80:80"

  # envoy:
  #   image: envoyproxy/envoy-dev:0061134ec5b9534afb63a33f3eb83fb3a809602c
  #   ports:
  #     - "10000:10000"
  #   volumes:
  #     - ./envoy.yaml:/etc/envoy/envoy.yaml

  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION:-5.3.1}
    restart: always
    container_name: kafka
    hostname: kafka
    environment:
      - KAFKA_BROKER_ID=0
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,OUTSIDE://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_NUM_PARTITIONS=3
      - CONFLUENT_SUPPORT_METRICS_ENABLE=0
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CREATE_TOPICS="BinanceMiniTickerPayload,CLIENT-REQUEST"
    ports:
      - "9092:9092"
    links: [zookeeper]

  zookeeper:
    hostname: zookeeper
    restart: always
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION:-5.3.1}
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    ports:
      - "2181:2181"

  # rpckafka:
  #   build:
  #     context: ./rpckafka
  #     dockerfile: Dockerfile
  #   hostname: rpckafka
  #   stdin_open: true
  #   restart: always
  #   ports:
  #     - "3032:3032"
  #   depends_on:
  #     - kafka
  #     - zookeeper
  #   volumes:
  #     - /rpckafka/target
  #     - ./rpckafka:/rpckafka/
  #   container_name: rpckafka

  rpckafka2:
    build:
      context: ./rpckafka
      dockerfile: Dockerfile
    hostname: rpckafka2
    stdin_open: true
    restart: always
    ports:
      - "3033-3040:3032"
    depends_on:
      - kafka
      - zookeeper
    volumes:
      - /rpckafka/target
      - ./rpckafka:/rpckafka/
    scale: 3
    # container_name: rpckafka2

  querykafkapsql:
    build:
      context: ./querykafkapsql
      dockerfile: Dockerfile
    hostname: querykafkapsql
    stdin_open: true
    restart: always
    # ports:
    #   - "3032:3032"
    # depends_on:
    #   - kafka
    #   - zookeeper
    #   - postgresql-master
    volumes:
      - /querykafkapsql/target
      - ./querykafkapsql:/querykafkapsql/
    container_name: querykafkapsql
    # ipc: host

    # swagger:~
    #   image: swaggerapi/swagger-ui
    #   hostname: swagger
    #   container_name: swagger
    #   ports:
    #     - "8080:8080"
    #   expose:
    #     - "8080"
    #   environment:
    #     API_URL: http://localhost:3000

volumes:
  postgresql_master_data:
    driver: local
  questdb_master_data:
    driver: local
  redis_master_data:
    driver: local
  # postgresql-slave:
  #   hostname: postgresql-slave
  #   container_name: postgresql-slave
  #   image: docker.io/bitnami/postgresql:11
  #   ports:
  #     - "5005:5432"
  #   depends_on:
  #     - postgresql-master
  #   environment:
  #     - POSTGRESQL_REPLICATION_MODE=slave
  #     - POSTGRESQL_REPLICATION_USER=repl_user
  #     - POSTGRESQL_REPLICATION_PASSWORD=repl_password
  #     - POSTGRESQL_MASTER_HOST=postgresql-master
  #     - POSTGRESQL_PASSWORD=my_password
  #     - POSTGRESQL_MASTER_PORT_NUMBER=5432
  #     - ALLOW_EMPTY_PASSWORD=yes

  # rabbitmq:
  #   image: rabbitmq:3.9-management #rabbitmq:3-management-alpine
  #   container_name: rabbitmq
  #   ports:
  #     - 5672:5672
  #     - 15672:15672
  #   volumes:
  #     - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
  #     - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

  # aeron:
  #   restart: always
  #   shm_size: "1gb"
  #   build:
  #     context: ./docker-aeron
  #     dockerfile: Dockerfile
  #   hostname: aeron
  #   container_name: aeron
  #   volumes:
  #     - ./aeron/data/:/dev/shm
  #     # - ./aeron/twilight-relayer/:/home/twilight-relayer
  #   network_mode: host
  #   ipc: host

  # kafka:
  #   image: confluentinc/cp-kafka:${CONFLUENT_VERSION:-5.3.1}
  #   restart: always
  #   container_name: kafka
  #   environment:
  #     - KAFKA_BROKER_ID=0
  #     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
  #     - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
  #     - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
  #     - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
  #     - KAFKA_NUM_PARTITIONS=3
  #     - CONFLUENT_SUPPORT_METRICS_ENABLE=0
  #     - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
  #   ports: ["9092:9092"]
  #   links: [zookeeper]

  # zookeeper:
  #   hostname: zookeeper
  #   restart: always
  #   container_name: zookeeper
  #   image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION:-5.3.1}
  #   environment:
  #     - ZOOKEEPER_CLIENT_PORT=2181
  #   ports: ["2181:2181"]

  # postgres-connector:
  #   image: debezium/connect:1.6
  #   container_name: postgres-debezium
  #   ports:
  #     - 9090:8083
  #   links:
  #     - kafka
  #   depends_on:
  #     - kafka
  #     - postgres
  #   environment:
  #     - BOOTSTRAP_SERVERS=kafka:9092
  #     - GROUP_ID=pg
  #     - CONFIG_STORAGE_TOPIC=pg_connect_configs
  #     - OFFSET_STORAGE_TOPIC=pg_connect_offsets
  #     - STATUS_STORAGE_TOPIC=pg_connect_statuses

  # postgres:
  #   image: postgres
  #   container_name: postgres
  #   restart: always
  #   ports:
  #       - 5000:5432
  #   environment:
  #     POSTGRES_DB: my_database
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     DB_BACKUP: true
  #   # volumes:
  #     # - ./backupme.sql:/usr/backupme.sql
  #   # command: sh -c 'PGPASSWORD=postgres && psql -U postgres my_database < usr/backupme.sql'

  # timescaledb:
  #   image: timescale/timescaledb:latest-pg14
  #   ports:
  #     - "5006:5432"
  #   depends_on:
  #     - postgresql-master
  #   volumes:
  #     - "postgresql_master_data:/bitnami/postgresql"
  #   environment:
  #     - POSTGRESQL_REPLICATION_MODE=slave
  #     - POSTGRESQL_REPLICATION_USER=repl_user
  #     - POSTGRESQL_REPLICATION_PASSWORD=repl_password
  #     - POSTGRESQL_MASTER_HOST=postgresql-master
  #     - POSTGRESQL_PASSWORD=my_password
  #     - POSTGRESQL_MASTER_PORT_NUMBER=5432
  #     - ALLOW_EMPTY_PASSWORD=yes
  #     - POSTGRES_HOST_AUTH_METHOD=trust

  # aeron:
  #   image: neomantra/aeron-cpp-debian:latest
  #   shm_size: "1gb"
  #   hostname: aeron
  #   container_name: aeron
  #   # restart: always
  #   volumes:
  #     - ./aeron/data/:/dev/shm
  #   # network: host
  #   # ports:
  #   #  - "40123:40123"
  #   #  - "17001:17001"
  #   network_mode: host
  #   ipc: host
