version: "3"

services:
  redis-server:
    hostname: redis
    container_name: redis
    build:
      context: ./redis
      dockerfile: Dockerfile
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
      - ./redis/config/:/etc/redis/

  postgresql-master:
    hostname: postgresql
    container_name: postgresql
    image: docker.io/bitnami/postgresql:11
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - "postgresql_master_data:/bitnami/postgresql"
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_DATABASE=my_database
      - ALLOW_EMPTY_PASSWORD=yes

  questdb:
    image: questdb/questdb
    restart: always
    stdin_open: true
    hostname: questDB
    container_name: questDB
    ports:
      - "9000:9000"
      - "9009:9009"
      - "8812:8812"
    volumes:
      - "questdb_master_data:/root/.questdb/"
    environment:
      - QDB_PG_USER=quest
      - QDB_PG_PASSWORD=my_password

  relayer-dev:
    build:
      context: ./
      dockerfile: Dockerfile.dev
    hostname: relayer-dev
    stdin_open: true
    ports:
      - "3030:3030"
    depends_on:
      - postgresql-master
      - redis-server
      - questdb
    container_name: relayer-dev
    ipc: host

  nginx:
    restart: always
    container_name: nginx
    hostname: nginx
    image: nginx:latest
    depends_on:
      - kafka
      - zookeeper
      - relayer-dev
      - archiver
      - api
      - postgresql-master
    # build:
    #   dockerfile: Dockerfile
    #   context: ./nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf/:/etc/nginx/conf.d/:ro
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    depends_on:
      - kafka
      - zookeeper
      - relayer-dev
      - archiver
      - api
      - postgresql-master

  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION:-5.3.1}
    restart: always
    container_name: kafka
    hostname: kafka
    environment:
      - KAFKA_BROKER_ID=0
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:29092,OUTSIDE://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_NUM_PARTITIONS=3
      - CONFLUENT_SUPPORT_METRICS_ENABLE=0
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CREATE_TOPICS="BinanceMiniTickerPayload,CLIENT-REQUEST"
    ports:
      - "9092:9092"
    links: [zookeeper]

  zookeeper:
    hostname: zookeeper
    restart: always
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION:-5.3.1}
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    ports:
      - "2181:2181"

  rpckafka:
    build:
      context: ./rpckafka
      dockerfile: Dockerfile
    hostname: rpckafka
    stdin_open: true
    restart: always
    ports:
      - "3032:3032"
    depends_on:
      - kafka
      - zookeeper
    volumes:
      - /rpckafka/target
      - ./rpckafka:/rpckafka/
    container_name: rpckafka

  # rpckafka2:
  #   build:
  #     context: ./rpckafka
  #     dockerfile: Dockerfile
  #   hostname: rpckafka2
  #   stdin_open: true
  #   restart: always
  #   ports:
  #     - "3033-3040:3032"
  #   depends_on:
  #     - kafka
  #     - zookeeper
  #   volumes:
  #     - /rpckafka/target
  #     - ./rpckafka:/rpckafka/
  #   scale: 3
  # docker-compose up --build redis-server postgresql-master questdb relayer-dev rpckafka querykafkapsql
  querykafkapsql:
    build:
      context: ./querykafkapsql
      dockerfile: Dockerfile
    hostname: querykafkapsql
    stdin_open: true
    restart: always
    depends_on:
      - postgresql-master
      - relayer-dev
    volumes:
      - /querykafkapsql/target
      - ./querykafkapsql:/querykafkapsql/
    container_name: querykafkapsql

  archiver:
    build:
      context: ./relayerapi-docker
      dockerfile: Dockerfile.archiver
    hostname: archiver
    stdin_open: true
    restart: always
    depends_on:
      - postgresql-master
    volumes:
      - /archiver/target
      - ./archiver:/archiver/
    container_name: archiver

  api:
    build:
      context: ./relayerapi-docker
      dockerfile: Dockerfile.api
    hostname: api
    stdin_open: true
    restart: always
    ports:
      - "8990:8990"
    depends_on:
      - postgresql-master
    volumes:
      - /api/target
      - ./api:/api/
    container_name: api

volumes:
  postgresql_master_data:
    driver: local
  questdb_master_data:
    driver: local
  redis_master_data:
    driver: local
